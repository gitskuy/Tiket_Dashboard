{"remainingRequest":"/home/ahmad/tiket/experiments/tiketfinalpush/Tiket_Dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ahmad/tiket/experiments/tiketfinalpush/Tiket_Dashboard/src/vuestic-theme/vuestic-components/vuestic-progress-bar/progress-types/CircleProgressBar.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/ahmad/tiket/experiments/tiketfinalpush/Tiket_Dashboard/src/vuestic-theme/vuestic-components/vuestic-progress-bar/progress-types/CircleProgressBar.vue","mtime":1563286052653},{"path":"/home/ahmad/tiket/experiments/tiketfinalpush/Tiket_Dashboard/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/ahmad/tiket/experiments/tiketfinalpush/Tiket_Dashboard/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/ahmad/tiket/experiments/tiketfinalpush/Tiket_Dashboard/node_modules/sass-loader/lib/loader.js","mtime":1533139052000},{"path":"/home/ahmad/tiket/experiments/tiketfinalpush/Tiket_Dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1563287225222},{"path":"/home/ahmad/tiket/experiments/tiketfinalpush/Tiket_Dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.circle-bar {\n  $step: 1;\n  $loops: 100 / $step;\n  $increment: 360 / $loops;\n  $half: round($loops / 2);\n\n  font-size: $progress-bar-value-font-size;\n  font-weight: $font-weight-bold;\n\n  &--animated {\n    transition: background-color ease .5s, width 3s linear !important;\n  }\n\n  &.circle-bar__progress-bar {\n    transition: background-color ease .5s, width 3s linear !important;\n    width: $progress-bar-circle-diameter;\n    height: $progress-bar-circle-diameter;\n    padding-left: $progress-bar-circle-bw;\n    padding-top: $progress-bar-circle-bw;\n    border-radius: 50%;\n    border-width: 0;\n  }\n\n  .circle-bar__overlay {\n    width: $progress-bar-circle-overlay-diameter;\n    height: $progress-bar-circle-diameter - 2*$progress-bar-circle-bw;\n    border-radius: 50%;\n    border-width: 0;\n    @include va-flex-center();\n    text-align: center;\n  }\n\n  & &--disabled {\n    opacity: 0.5\n  }\n}\n",{"version":3,"sources":["CircleProgressBar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6HA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"CircleProgressBar.vue","sourceRoot":"src/vuestic-theme/vuestic-components/vuestic-progress-bar/progress-types","sourcesContent":["<template>\n  <div\n    class=\"circle-bar circle-bar__progress-bar\"\n    :style=\"'background-image: ' + backgroundImage\"\n  >\n    <div class=\"circle-bar__overlay\" :style=\"circleBarStyle\">\n      {{ text ? text : value + '%'}}\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  colorConfig,\n  VuesticTheme,\n} from './../../vuestic-color-picker/VuesticTheme'\n\nexport default {\n  data () {\n    return {\n      animatedValue: 0,\n      animateValueInterval: null,\n    }\n  },\n  props: {\n    value: {\n      type: Number,\n      default: 0,\n    },\n    text: {\n      type: String,\n      default: '',\n    },\n    theme: {\n      type: String,\n      default: 'Primary',\n    },\n    // TODO Questionable. Ideally we should have transparent background.\n    backgroundTheme: {\n      type: String,\n      default: 'White',\n    },\n    startAnimated: {\n      type: Boolean,\n      default: false,\n    },\n    // Time it would take for animation to go from 0 to 100.\n    animationInterval: {\n      type: Number,\n      default: 2000,\n    },\n  },\n  created () {\n    if (!this.startAnimated) {\n      this.setAnimatedValue(Math.round(this.value))\n    }\n  },\n  watch: {\n    value: {\n      immediate: true,\n      handler () {\n        // Only one such interval is meant to be on.\n        if (this.animateValueInterval) {\n          return\n        }\n        // We're updating `animatedValue` to follow `value` change.\n        // `animatedValue` is used to display actual bar.\n        this.animateValueInterval = setInterval(() => {\n          if (this.value === this.animatedValue) {\n            clearInterval(this.animateValueInterval)\n            this.animateValueInterval = null\n            return\n          }\n          const deltaValue = this.value < this.animatedValue ? -1 : 1\n          this.setAnimatedValue(this.animatedValue + deltaValue)\n        }, this.animationInterval / 100)\n      },\n    },\n  },\n  beforeDestroy () {\n    if (this.animateValueInterval) {\n      clearInterval(this.animateValueInterval)\n      this.animateValueInterval = null\n    }\n  },\n  methods: {\n    setAnimatedValue (value) {\n      if (value < 0) {\n        this.animatedValue = 0\n        return\n      }\n      if (value > 100) {\n        this.animatedValue = 100\n        return\n      }\n      this.animatedValue = value\n    },\n  },\n  computed: {\n    backgroundImage () {\n      const theme = colorConfig[VuesticTheme[this.theme]]\n      const value = this.animatedValue\n      const backgroundTheme = colorConfig[VuesticTheme[this.backgroundTheme]]\n\n      if (value < 50) {\n        const nextDeg = 90 + (3.6 * value) + 'deg'\n        return `linear-gradient(90deg, ${backgroundTheme} 50%, transparent 50%, transparent), ` +\n          `linear-gradient(${nextDeg}, ${theme} 50%, ${backgroundTheme} 50%, ${backgroundTheme})`\n      } else {\n        const nextDeg = -90 + (3.6 * (value - 50)) + 'deg'\n        return `linear-gradient(${nextDeg}, ${theme} 50%, transparent 50%, transparent), ` +\n          `linear-gradient(270deg, ${theme} 50%, ${backgroundTheme} 50%, ${backgroundTheme})`\n      }\n    },\n    circleBarStyle () {\n      return {\n        backgroundColor: colorConfig[VuesticTheme[this.backgroundTheme]],\n        color: colorConfig[VuesticTheme[this.theme]],\n      }\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\">\n.circle-bar {\n  $step: 1;\n  $loops: 100 / $step;\n  $increment: 360 / $loops;\n  $half: round($loops / 2);\n\n  font-size: $progress-bar-value-font-size;\n  font-weight: $font-weight-bold;\n\n  &--animated {\n    transition: background-color ease .5s, width 3s linear !important;\n  }\n\n  &.circle-bar__progress-bar {\n    transition: background-color ease .5s, width 3s linear !important;\n    width: $progress-bar-circle-diameter;\n    height: $progress-bar-circle-diameter;\n    padding-left: $progress-bar-circle-bw;\n    padding-top: $progress-bar-circle-bw;\n    border-radius: 50%;\n    border-width: 0;\n  }\n\n  .circle-bar__overlay {\n    width: $progress-bar-circle-overlay-diameter;\n    height: $progress-bar-circle-diameter - 2*$progress-bar-circle-bw;\n    border-radius: 50%;\n    border-width: 0;\n    @include va-flex-center();\n    text-align: center;\n  }\n\n  & &--disabled {\n    opacity: 0.5\n  }\n}\n</style>\n"]}]}