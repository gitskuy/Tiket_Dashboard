{"remainingRequest":"/home/ahmad/tiket/experiments/myproject/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/ahmad/tiket/experiments/myproject/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ahmad/tiket/experiments/myproject/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ahmad/tiket/experiments/myproject/src/components/ui/notifications/Notifications.vue?vue&type=template&id=7e7dac14&scoped=true&","dependencies":[{"path":"/home/ahmad/tiket/experiments/myproject/src/components/ui/notifications/Notifications.vue","mtime":1563286052633},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/cache-loader/dist/cjs.js","mtime":1563287225222},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/cache-loader/dist/cjs.js","mtime":1563287225222},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"notifications-page\" }, [\n    _c(\"div\", { staticClass: \"va-row\" }, [\n      _c(\n        \"div\",\n        { staticClass: \"flex md12\" },\n        [\n          _c(\n            \"vuestic-widget\",\n            {\n              attrs: {\n                headerText: _vm._f(\"translate\")(\n                  \"notificationsPage.popovers.title\"\n                )\n              }\n            },\n            [\n              _c(\"div\", { staticClass: \"va-row\" }, [\n                _c(\"div\", { staticClass: \"flex md6\" }, [\n                  _c(\n                    \"fieldset\",\n                    [\n                      _c(\"div\", { staticClass: \"form-group\" }, [\n                        _c(\"div\", { staticClass: \"input-group\" }, [\n                          _c(\"input\", {\n                            directives: [\n                              {\n                                name: \"model\",\n                                rawName: \"v-model\",\n                                value: _vm.popoverTitle,\n                                expression: \"popoverTitle\"\n                              }\n                            ],\n                            attrs: { id: \"popover-title\", required: \"\" },\n                            domProps: { value: _vm.popoverTitle },\n                            on: {\n                              input: [\n                                function($event) {\n                                  if ($event.target.composing) {\n                                    return\n                                  }\n                                  _vm.popoverTitle = $event.target.value\n                                },\n                                _vm.checkPopoverContents\n                              ]\n                            }\n                          }),\n                          _c(\n                            \"label\",\n                            {\n                              staticClass: \"control-label\",\n                              attrs: { for: \"popover-title\" }\n                            },\n                            [\n                              _vm._v(\n                                _vm._s(\n                                  _vm._f(\"translate\")(\n                                    \"notificationsPage.popovers.popoverTitleLabel\"\n                                  )\n                                )\n                              )\n                            ]\n                          ),\n                          _c(\"i\", { staticClass: \"bar\" })\n                        ])\n                      ]),\n                      _c(\"div\", { staticClass: \"form-group\" }, [\n                        _c(\"div\", { staticClass: \"input-group\" }, [\n                          _c(\"input\", {\n                            directives: [\n                              {\n                                name: \"model\",\n                                rawName: \"v-model\",\n                                value: _vm.popoverText,\n                                expression: \"popoverText\"\n                              }\n                            ],\n                            attrs: { id: \"popover-text\", required: \"\" },\n                            domProps: { value: _vm.popoverText },\n                            on: {\n                              input: [\n                                function($event) {\n                                  if ($event.target.composing) {\n                                    return\n                                  }\n                                  _vm.popoverText = $event.target.value\n                                },\n                                _vm.checkPopoverContents\n                              ]\n                            }\n                          }),\n                          _c(\n                            \"label\",\n                            {\n                              staticClass: \"control-label\",\n                              attrs: { for: \"popover-text\" }\n                            },\n                            [\n                              _vm._v(\n                                _vm._s(\n                                  _vm._f(\"translate\")(\n                                    \"notificationsPage.popovers.popoverTextLabel\"\n                                  )\n                                )\n                              )\n                            ]\n                          ),\n                          _c(\"i\", { staticClass: \"bar\" })\n                        ])\n                      ]),\n                      _c(\"div\", { staticClass: \"form-group\" }, [\n                        _c(\"div\", { staticClass: \"input-group\" }, [\n                          _c(\"input\", {\n                            directives: [\n                              {\n                                name: \"model\",\n                                rawName: \"v-model\",\n                                value: _vm.popoverIcon,\n                                expression: \"popoverIcon\"\n                              }\n                            ],\n                            attrs: { id: \"popover-icon\", required: \"\" },\n                            domProps: { value: _vm.popoverIcon },\n                            on: {\n                              input: [\n                                function($event) {\n                                  if ($event.target.composing) {\n                                    return\n                                  }\n                                  _vm.popoverIcon = $event.target.value\n                                },\n                                _vm.checkPopoverContents\n                              ]\n                            }\n                          }),\n                          _c(\n                            \"label\",\n                            {\n                              staticClass: \"control-label\",\n                              attrs: { for: \"popover-icon\" }\n                            },\n                            [\n                              _vm._v(\n                                _vm._s(\n                                  _vm._f(\"translate\")(\n                                    \"notificationsPage.popovers.popoverIconLabel\"\n                                  )\n                                )\n                              )\n                            ]\n                          ),\n                          _c(\"i\", { staticClass: \"bar\" })\n                        ])\n                      ]),\n                      _c(\n                        \"vuestic-popover\",\n                        {\n                          attrs: {\n                            \"popover-class\": \"vuestic-tooltip\",\n                            placement: \"right\",\n                            disabled: _vm.isPopoverDisabled\n                          }\n                        },\n                        [\n                          _c(\n                            \"button\",\n                            {\n                              staticClass: \"btn btn-sm btn-primary\",\n                              attrs: { slot: \"trigger\" },\n                              slot: \"trigger\"\n                            },\n                            [\n                              _vm._v(\n                                \"\\n                  \" +\n                                  _vm._s(\n                                    _vm._f(\"translate\")(\n                                      \"notificationsPage.popovers.showPopover\"\n                                    )\n                                  ) +\n                                  \"\\n                \"\n                              )\n                            ]\n                          ),\n                          _c(\"i\", {\n                            staticClass: \"fa\",\n                            class: _vm.popoverIcon,\n                            attrs: { slot: \"icon\" },\n                            slot: \"icon\"\n                          }),\n                          _c(\n                            \"span\",\n                            { attrs: { slot: \"header\" }, slot: \"header\" },\n                            [_vm._v(_vm._s(_vm.popoverTitle))]\n                          ),\n                          _c(\n                            \"span\",\n                            { attrs: { slot: \"body\" }, slot: \"body\" },\n                            [_vm._v(_vm._s(_vm.popoverText))]\n                          )\n                        ]\n                      )\n                    ],\n                    1\n                  )\n                ]),\n                _c(\"div\", { staticClass: \"flex md6\" }, [\n                  _c(\n                    \"p\",\n                    [\n                      _vm._v(\n                        \"\\n              Any text can be used for\\n              \"\n                      ),\n                      _c(\n                        \"vuestic-tooltip\",\n                        { attrs: { options: _vm.topTooltipOptions } },\n                        [\n                          _c(\"a\", { attrs: { href: \"#\" } }, [\n                            _vm._v(\n                              _vm._s(\n                                _vm._f(\"translate\")(\n                                  \"notificationsPage.popovers.topTooltip\"\n                                )\n                              )\n                            )\n                          ])\n                        ]\n                      ),\n                      _vm._v(\n                        \"\\n              showcase. Just anything you can possibly imagine to test\\n              \"\n                      ),\n                      _c(\n                        \"vuestic-tooltip\",\n                        { attrs: { options: _vm.rightTooltipOptions } },\n                        [\n                          _c(\"a\", { attrs: { href: \"#\" } }, [\n                            _vm._v(\n                              _vm._s(\n                                _vm._f(\"translate\")(\n                                  \"notificationsPage.popovers.rightTooltip\"\n                                )\n                              )\n                            )\n                          ])\n                        ]\n                      ),\n                      _vm._v(\n                        \"\\n              .\\n              But it can appear on the\\n              \"\n                      ),\n                      _c(\n                        \"vuestic-tooltip\",\n                        { attrs: { options: _vm.leftTooltipOptions } },\n                        [\n                          _c(\"a\", { attrs: { href: \"#\" } }, [\n                            _vm._v(\n                              _vm._s(\n                                _vm._f(\"translate\")(\n                                  \"notificationsPage.popovers.leftTooltip\"\n                                )\n                              )\n                            )\n                          ])\n                        ]\n                      ),\n                      _vm._v(\n                        \"\\n              .\\n              Or just\\n              \"\n                      ),\n                      _c(\n                        \"vuestic-tooltip\",\n                        { attrs: { options: _vm.bottomTooltipOptions } },\n                        [\n                          _c(\"a\", { attrs: { href: \"#\" } }, [\n                            _vm._v(\n                              _vm._s(\n                                _vm._f(\"translate\")(\n                                  \"notificationsPage.popovers.bottomTooltip\"\n                                )\n                              )\n                            )\n                          ])\n                        ]\n                      ),\n                      _vm._v(\"\\n              the item.\\n            \")\n                    ],\n                    1\n                  )\n                ])\n              ])\n            ]\n          )\n        ],\n        1\n      )\n    ]),\n    _c(\"div\", { staticClass: \"va-row\" }, [\n      _c(\n        \"div\",\n        { staticClass: \"flex md12\" },\n        [\n          _c(\n            \"vuestic-widget\",\n            {\n              attrs: {\n                headerText: _vm._f(\"translate\")(\n                  \"notificationsPage.alerts.title\"\n                )\n              }\n            },\n            [\n              _c(\n                \"vuestic-alert\",\n                { attrs: { type: \"success\", withCloseBtn: true } },\n                [\n                  _c(\n                    \"span\",\n                    { staticClass: \"badge badge-pill badge-success\" },\n                    [\n                      _vm._v(\n                        _vm._s(\n                          _vm._f(\"translate\")(\n                            \"notificationsPage.alerts.success\"\n                          )\n                        )\n                      )\n                    ]\n                  ),\n                  _vm._v(\n                    \"\\n          \" +\n                      _vm._s(\n                        _vm._f(\"translate\")(\n                          \"notificationsPage.alerts.successMessage\"\n                        )\n                      ) +\n                      \"\\n          \"\n                  ),\n                  _c(\"i\", { staticClass: \"fa fa-close alert-close\" })\n                ]\n              ),\n              _c(\n                \"vuestic-alert\",\n                { attrs: { type: \"info\", withCloseBtn: true } },\n                [\n                  _c(\"span\", { staticClass: \"badge badge-pill badge-info\" }, [\n                    _vm._v(\n                      _vm._s(\n                        _vm._f(\"translate\")(\"notificationsPage.alerts.info\")\n                      )\n                    )\n                  ]),\n                  _vm._v(\n                    \"\\n          \" +\n                      _vm._s(\n                        _vm._f(\"translate\")(\n                          \"notificationsPage.alerts.infoMessage\"\n                        )\n                      ) +\n                      \"\\n        \"\n                  )\n                ]\n              ),\n              _c(\n                \"vuestic-alert\",\n                { attrs: { type: \"warning\", withCloseBtn: true } },\n                [\n                  _c(\n                    \"span\",\n                    { staticClass: \"badge badge-pill badge-warning\" },\n                    [\n                      _vm._v(\n                        _vm._s(\n                          _vm._f(\"translate\")(\n                            \"notificationsPage.alerts.warning\"\n                          )\n                        )\n                      )\n                    ]\n                  ),\n                  _vm._v(\n                    \"\\n          \" +\n                      _vm._s(\n                        _vm._f(\"translate\")(\n                          \"notificationsPage.alerts.warningMessage\"\n                        )\n                      ) +\n                      \"\\n        \"\n                  )\n                ]\n              ),\n              _c(\n                \"vuestic-alert\",\n                { attrs: { type: \"danger\", withCloseBtn: true } },\n                [\n                  _c(\"span\", { staticClass: \"badge badge-pill badge-danger\" }, [\n                    _vm._v(\n                      _vm._s(\n                        _vm._f(\"translate\")(\"notificationsPage.alerts.danger\")\n                      )\n                    )\n                  ]),\n                  _vm._v(\n                    \"\\n          \" +\n                      _vm._s(\n                        _vm._f(\"translate\")(\n                          \"notificationsPage.alerts.dangerMessage\"\n                        )\n                      ) +\n                      \"\\n        \"\n                  )\n                ]\n              )\n            ],\n            1\n          )\n        ],\n        1\n      )\n    ]),\n    _c(\"div\", { staticClass: \"va-row\" }, [\n      _c(\n        \"div\",\n        { staticClass: \"flex xs12\" },\n        [\n          _c(\n            \"vuestic-widget\",\n            { attrs: { headerText: _vm.$t(\"notificationsPage.toasts.title\") } },\n            [\n              _c(\"div\", { staticClass: \"va-row\" }, [\n                _c(\"div\", { staticClass: \"flex xs12 md6\" }, [\n                  _c(\"fieldset\", [\n                    _c(\"div\", { staticClass: \"form-group\" }, [\n                      _c(\"div\", { staticClass: \"input-group\" }, [\n                        _c(\"input\", {\n                          directives: [\n                            {\n                              name: \"model\",\n                              rawName: \"v-model\",\n                              value: _vm.toastText,\n                              expression: \"toastText\"\n                            }\n                          ],\n                          attrs: { id: \"toast-text\", required: \"\" },\n                          domProps: { value: _vm.toastText },\n                          on: {\n                            input: function($event) {\n                              if ($event.target.composing) {\n                                return\n                              }\n                              _vm.toastText = $event.target.value\n                            }\n                          }\n                        }),\n                        _c(\n                          \"label\",\n                          {\n                            staticClass: \"control-label\",\n                            attrs: { for: \"toast-text\" }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n                    \" +\n                                _vm._s(\n                                  _vm.$t(\"notificationsPage.toasts.textLabel\")\n                                ) +\n                                \"\\n                  \"\n                            )\n                          ]\n                        ),\n                        _c(\"i\", { staticClass: \"bar\" })\n                      ])\n                    ]),\n                    _c(\"div\", { staticClass: \"form-group\" }, [\n                      _c(\"div\", { staticClass: \"input-group\" }, [\n                        _c(\"input\", {\n                          directives: [\n                            {\n                              name: \"model\",\n                              rawName: \"v-model\",\n                              value: _vm.toastDuration,\n                              expression: \"toastDuration\"\n                            }\n                          ],\n                          attrs: {\n                            id: \"toast-duration\",\n                            type: \"number\",\n                            required: \"\"\n                          },\n                          domProps: { value: _vm.toastDuration },\n                          on: {\n                            input: function($event) {\n                              if ($event.target.composing) {\n                                return\n                              }\n                              _vm.toastDuration = $event.target.value\n                            }\n                          }\n                        }),\n                        _c(\n                          \"label\",\n                          {\n                            staticClass: \"control-label\",\n                            attrs: { for: \"toast-duration\" }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n                    \" +\n                                _vm._s(\n                                  _vm.$t(\n                                    \"notificationsPage.toasts.durationLabel\"\n                                  )\n                                ) +\n                                \"\\n                  \"\n                            )\n                          ]\n                        ),\n                        _c(\"i\", { staticClass: \"bar\" })\n                      ])\n                    ]),\n                    _c(\"div\", { staticClass: \"form-group\" }, [\n                      _c(\"div\", { staticClass: \"input-group\" }, [\n                        _c(\"input\", {\n                          directives: [\n                            {\n                              name: \"model\",\n                              rawName: \"v-model\",\n                              value: _vm.toastIcon,\n                              expression: \"toastIcon\"\n                            }\n                          ],\n                          attrs: { id: \"toast-icon\", required: \"\" },\n                          domProps: { value: _vm.toastIcon },\n                          on: {\n                            input: function($event) {\n                              if ($event.target.composing) {\n                                return\n                              }\n                              _vm.toastIcon = $event.target.value\n                            }\n                          }\n                        }),\n                        _c(\n                          \"label\",\n                          {\n                            staticClass: \"control-label\",\n                            attrs: { for: \"toast-icon\" }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n                    \" +\n                                _vm._s(\n                                  _vm.$t(\"notificationsPage.toasts.iconLabel\")\n                                ) +\n                                \"\\n                  \"\n                            )\n                          ]\n                        ),\n                        _c(\"i\", { staticClass: \"bar\" })\n                      ])\n                    ]),\n                    _c(\n                      \"div\",\n                      {\n                        staticClass: \"form-group va-row\",\n                        staticStyle: { \"margin-bottom\": \"2rem\" }\n                      },\n                      [\n                        _c(\"toast-position-picker\", {\n                          model: {\n                            value: _vm.toastPosition,\n                            callback: function($$v) {\n                              _vm.toastPosition = $$v\n                            },\n                            expression: \"toastPosition\"\n                          }\n                        }),\n                        _c(\"vuestic-checkbox\", {\n                          attrs: {\n                            label: _vm._f(\"translate\")(\n                              \"notificationsPage.toasts.fullWidthLabel\"\n                            ),\n                            id: \"toast-fullwidth\"\n                          },\n                          model: {\n                            value: _vm.isToastFullWidth,\n                            callback: function($$v) {\n                              _vm.isToastFullWidth = $$v\n                            },\n                            expression: \"isToastFullWidth\"\n                          }\n                        })\n                      ],\n                      1\n                    ),\n                    _c(\n                      \"button\",\n                      {\n                        staticClass: \"btn btn-sm btn-primary\",\n                        attrs: { slot: \"trigger\" },\n                        on: { click: _vm.launchToast },\n                        slot: \"trigger\"\n                      },\n                      [\n                        _vm._v(\n                          \"\\n                \" +\n                            _vm._s(\n                              _vm.$t(\"notificationsPage.toasts.launchToast\")\n                            ) +\n                            \"\\n              \"\n                        )\n                      ]\n                    )\n                  ]),\n                  _c(\"br\"),\n                  _c(\"br\"),\n                  _c(\"br\")\n                ]),\n                _c(\"div\", { staticClass: \"flex xs12 md6 flex-center\" }, [\n                  _vm.isToastContentPresent\n                    ? _c(\n                        \"div\",\n                        {\n                          staticClass:\n                            \"toasted-container sample-toasted-container shrink\"\n                        },\n                        [\n                          _c(\n                            \"div\",\n                            {\n                              staticClass: \"toasted vuestic-toast none default\"\n                            },\n                            [\n                              _vm.toastIcon\n                                ? _c(\"i\", {\n                                    staticClass: \"fa\",\n                                    class: _vm.toastIcon\n                                  })\n                                : _vm._e(),\n                              _vm._v(\n                                \"\\n                \" +\n                                  _vm._s(_vm.toastText) +\n                                  \"\\n              \"\n                              )\n                            ]\n                          )\n                        ]\n                      )\n                    : _vm._e()\n                ])\n              ])\n            ]\n          )\n        ],\n        1\n      )\n    ])\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}