{"remainingRequest":"/home/ahmad/tiket/experiments/myproject/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ahmad/tiket/experiments/myproject/src/vuestic-theme/vuestic-components/vuestic-popup/quasar/components/popup/VuesticPopup.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/ahmad/tiket/experiments/myproject/src/vuestic-theme/vuestic-components/vuestic-popup/quasar/components/popup/VuesticPopup.vue","mtime":1563286052653},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/sass-loader/lib/loader.js","mtime":1533139052000},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/cache-loader/dist/cjs.js","mtime":1563287225222},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import \"../../../../../vuestic-sass/resources/resources\";\n\n.q-popover {\n  position: fixed;\n  box-shadow: 0 4px 9.6px 0.4px rgba(74, 227, 135, .5);\n  border-radius: 3px;\n  background: white;\n  z-index: 8000;\n  overflow-y: auto;\n  overflow-x: hidden;\n  max-width: 100vw;\n  outline: 0;\n  > .q-list:only-child {\n    border: none;\n  }\n\n  &__container {\n    width: 100%;\n    overflow: auto;\n  }\n}\n\nbody div .q-popover {\n  display: none;\n}\n",{"version":3,"sources":["VuesticPopup.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"VuesticPopup.vue","sourceRoot":"src/vuestic-theme/vuestic-components/vuestic-popup/quasar/components/popup","sourcesContent":["<script>\nimport {\n  offsetValidator,\n  parsePosition,\n  positionValidator,\n  setPosition,\n} from '../../utils/popup.js'\nimport frameDebounce from '../../utils/frame-debounce.js'\nimport { getScrollTarget } from '../../utils/scroll.js'\nimport EscapeKey from '../../utils/escape-key.js'\nimport ModelToggleMixin from '../../mixins/model-toggle.js'\nimport { listenOpts, position as eventPosition } from '../../utils/event.js'\nimport CanRenderMixinMixin from '../../mixins/can-render.js'\n\nexport default {\n  name: 'vuestic-popup',\n  mixins: [ModelToggleMixin, CanRenderMixinMixin],\n  props: {\n    anchor: {\n      type: String,\n      validator: positionValidator,\n    },\n    self: {\n      type: String,\n      validator: positionValidator,\n    },\n    fit: Boolean,\n    cover: Boolean,\n    persistent: Boolean,\n    keepOnScreen: Boolean,\n    maxHeight: String,\n    touchPosition: Boolean,\n    anchorClick: {\n      /*\n        for handling anchor outside of Popover\n        example: context menu component\n      */\n      type: Boolean,\n      default: true,\n    },\n    offset: {\n      type: Array,\n      validator: offsetValidator,\n    },\n    noFocus: Boolean,\n    noRefocus: Boolean,\n    disable: Boolean,\n  },\n  watch: {\n    $route () {\n      this.hide()\n    },\n  },\n  computed: {\n    horizSide () {\n      return 'right'\n      // return this.$q.i18n.rtl ? 'right' : 'left'\n    },\n    anchorOrigin () {\n      return parsePosition(\n        this.cover\n          ? `top ${this.horizSide}`\n          : this.anchor || `bottom ${this.horizSide}`,\n      )\n    },\n    selfOrigin () {\n      return parsePosition(this.self || `top ${this.horizSide}`)\n    },\n  },\n  render (h) {\n    if (!this.canRender) {\n      return\n    }\n\n    return h('div', {\n      staticClass: 'q-popover scroll',\n      ref: 'content',\n      attrs: { tabindex: -1 },\n      on: {\n        click (e) {\n          e.stopPropagation()\n        },\n      },\n    }, this.$slots.default)\n  },\n  mounted () {\n    this.__updatePosition = frameDebounce((_, event, animate) => this.reposition(event, animate))\n    this.$nextTick(() => {\n      this.anchorEl = this.$el.parentNode\n      this.anchorEl.removeChild(this.$el)\n\n      if (\n        this.anchorEl.classList.contains('q-btn-inner') ||\n        this.anchorEl.classList.contains('q-if-inner') ||\n        this.anchorEl.classList.contains('no-pointer-events')\n      ) {\n        this.anchorEl = this.anchorEl.parentNode\n      }\n\n      if (this.anchorClick) {\n        this.anchorEl.classList.add('cursor-pointer')\n        this.anchorEl.addEventListener('click', this.toggle)\n        this.anchorEl.addEventListener('keyup', this.__toggleKey)\n      }\n    })\n\n    this.value && this.show()\n  },\n  beforeDestroy () {\n    this.showing && this.__cleanup()\n    if (this.anchorClick && this.anchorEl) {\n      this.anchorEl.removeEventListener('click', this.toggle)\n      this.anchorEl.removeEventListener('keyup', this.__toggleKey)\n    }\n  },\n  methods: {\n    __show (evt) {\n      if (!this.noRefocus) {\n        this.__refocusTarget = (this.anchorClick && this.anchorEl) || document.activeElement\n      }\n      document.body.appendChild(this.$el)\n      EscapeKey.register(() => {\n        this.$emit('escape-key')\n        this.hide()\n      })\n      this.scrollTarget = getScrollTarget(this.anchorEl)\n      this.scrollTarget.addEventListener('scroll', this.__updatePosition, listenOpts.passive)\n      if (this.scrollTarget !== window) {\n        window.addEventListener('scroll', this.__updatePosition, listenOpts.passive)\n      }\n      window.addEventListener('resize', this.__updatePosition, listenOpts.passive)\n      this.__updatePosition(0, evt, true)\n\n      clearTimeout(this.timer)\n      if (!this.noFocus && this.$refs.content) {\n        this.$refs.content.focus()\n      }\n      this.timer = setTimeout(() => {\n        document.body.addEventListener('mousedown', this.__bodyHide, true)\n        document.body.addEventListener('touchstart', this.__bodyHide, true)\n        this.showPromise && this.showPromiseResolve()\n      }, 0)\n    },\n    __toggleKey (evt) {\n      if (evt.keyCode === 13) {\n        this.toggle(evt)\n      }\n    },\n    __bodyHide (evt) {\n      if (\n        this.persistent || (\n          evt && evt.target &&\n          (this.$el.contains(evt.target) || this.anchorEl.contains(evt.target))\n        )\n      ) {\n        return\n      }\n\n      this.hide(evt)\n    },\n    __hide () {\n      this.__cleanup()\n      this.hidePromise && this.hidePromiseResolve()\n      if (!this.noRefocus && this.__refocusTarget) {\n        this.__refocusTarget.focus()\n        !this.__refocusTarget.classList.contains('q-if') && this.__refocusTarget.blur()\n      }\n    },\n    __cleanup () {\n      clearTimeout(this.timer)\n\n      document.body.removeEventListener('mousedown', this.__bodyHide, true)\n      document.body.removeEventListener('touchstart', this.__bodyHide, true)\n      this.scrollTarget.removeEventListener('scroll', this.__updatePosition, listenOpts.passive)\n      if (this.scrollTarget !== window) {\n        window.removeEventListener('scroll', this.__updatePosition, listenOpts.passive)\n      }\n      window.removeEventListener('resize', this.__updatePosition, listenOpts.passive)\n      EscapeKey.pop()\n\n      this.$el.remove()\n    },\n    reposition (event, animate) {\n      const { top, bottom, left, right } = this.anchorEl.getBoundingClientRect()\n\n      if (\n        !this.keepOnScreen &&\n        (bottom < 0 || top > window.innerHeight || right < 0 || left > window.innerWidth)\n      ) {\n        return this.hide()\n      }\n\n      if (this.fit || this.cover) {\n        const style = window.getComputedStyle(this.anchorEl)\n        this.$el.style.minWidth = style.getPropertyValue('width')\n        if (this.cover) {\n          this.$el.style.minHeight = style.getPropertyValue('height')\n        }\n      }\n\n      if (animate) {\n        if (this.touchPosition) {\n          const { top: eventTop, left: eventLeft } = eventPosition(event)\n          this.touchOffset = { left: eventLeft - left, top: eventTop - top }\n        } else {\n          delete this.touchOffset\n        }\n      }\n\n      setPosition({\n        event,\n        animate,\n        el: this.$el,\n        offset: this.offset,\n        anchorEl: this.anchorEl,\n        anchorOrigin: this.anchorOrigin,\n        selfOrigin: this.selfOrigin,\n        maxHeight: this.maxHeight,\n        anchorClick: this.anchorClick,\n        touchPosition: this.touchPosition,\n        touchOffset: this.touchOffset,\n        cover: this.cover,\n      })\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\">\n@import \"../../../../../vuestic-sass/resources/resources\";\n\n.q-popover {\n  position: fixed;\n  box-shadow: 0 4px 9.6px 0.4px rgba(74, 227, 135, .5);\n  border-radius: 3px;\n  background: white;\n  z-index: 8000;\n  overflow-y: auto;\n  overflow-x: hidden;\n  max-width: 100vw;\n  outline: 0;\n  > .q-list:only-child {\n    border: none;\n  }\n\n  &__container {\n    width: 100%;\n    overflow: auto;\n  }\n}\n\nbody div .q-popover {\n  display: none;\n}\n</style>\n"]}]}