{"remainingRequest":"/home/ahmad/tiket/experiments/myproject/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ahmad/tiket/experiments/myproject/src/components/maps/bubble-maps/BubbleMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ahmad/tiket/experiments/myproject/src/components/maps/bubble-maps/BubbleMap.vue","mtime":1563286052629},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/cache-loader/dist/cjs.js","mtime":1563287225222},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/cache-loader/dist/cjs.js","mtime":1563287225222},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nimport 'amcharts3'\nimport 'amcharts3/amcharts/plugins/responsive/responsive.js'\nimport 'amcharts3/amcharts/serial.js'\nimport 'amcharts3/amcharts/themes/light'\n\nimport 'ammap3'\nimport 'ammap3/ammap/maps/js/worldLow'\n\nexport default {\n  name: 'bubble-map',\n\n  props: ['mapData'],\n\n  methods: {\n    drawMap () {\n      /* global AmCharts */\n      let map\n      let minBulletSize = 3\n      let maxBulletSize = 70\n      let min = Infinity\n      let max = -Infinity\n      AmCharts.theme = AmCharts.themes.light\n\n      // get min and max values\n      this.mapData.data.forEach((dataItem) => {\n        let value = dataItem.value\n        if (value < min) {\n          min = value\n        }\n        if (value > max) {\n          max = value\n        }\n      })\n\n      // build map\n      map = new AmCharts.AmMap()\n\n      map.projection = 'winkel3'\n      map.addTitle('Population of the World in 2011', 14, 1, 1, false)\n      map.addTitle('source: Gapminder', 11, 1, 1, 1, false)\n      map.areasSettings = {\n        unlistedAreasColor: '#eee',\n        unlistedAreasAlpha: 1,\n        outlineColor: '#fff',\n        outlineThickness: 2,\n      }\n      map.imagesSettings = {\n        balloonText: '<span style=\"font-size:14px\"><b>[[title]]</b>: [[value]]</span>',\n        alpha: 0.75,\n      }\n\n      let dataProvider = {\n        mapVar: AmCharts.maps.worldLow,\n        images: [],\n      }\n\n      // create circle for each country\n      // it's better to use circle square to show difference between values, not a radius\n      var maxSquare = maxBulletSize * maxBulletSize * 2 * Math.PI\n      var minSquare = minBulletSize * minBulletSize * 2 * Math.PI\n\n      // create circle for each country\n      this.mapData.data.forEach((dataItem) => {\n        var value = dataItem.value\n        // calculate size of a bubble\n        var square = (value - min) / (max - min) * (maxSquare - minSquare) + minSquare\n        if (square < minSquare) {\n          square = minSquare\n        }\n        var size = Math.sqrt(square / (Math.PI * 2))\n        var id = dataItem.code\n        dataProvider.images.push({\n          type: 'circle',\n          width: size,\n          height: size,\n          color: dataItem.color,\n          longitude: this.mapData.latlong[id].longitude,\n          latitude: this.mapData.latlong[id].latitude,\n          title: dataItem.name,\n          value: value,\n        })\n      })\n\n      map.dataProvider = dataProvider\n      map.write(this.$el)\n    },\n  },\n\n  mounted () {\n    this.drawMap()\n  },\n}\n",{"version":3,"sources":["BubbleMap.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"BubbleMap.vue","sourceRoot":"src/components/maps/bubble-maps","sourcesContent":["<template>\n  <div class=\"bubble-map\"></div>\n</template>\n\n<script>\nimport 'amcharts3'\nimport 'amcharts3/amcharts/plugins/responsive/responsive.js'\nimport 'amcharts3/amcharts/serial.js'\nimport 'amcharts3/amcharts/themes/light'\n\nimport 'ammap3'\nimport 'ammap3/ammap/maps/js/worldLow'\n\nexport default {\n  name: 'bubble-map',\n\n  props: ['mapData'],\n\n  methods: {\n    drawMap () {\n      /* global AmCharts */\n      let map\n      let minBulletSize = 3\n      let maxBulletSize = 70\n      let min = Infinity\n      let max = -Infinity\n      AmCharts.theme = AmCharts.themes.light\n\n      // get min and max values\n      this.mapData.data.forEach((dataItem) => {\n        let value = dataItem.value\n        if (value < min) {\n          min = value\n        }\n        if (value > max) {\n          max = value\n        }\n      })\n\n      // build map\n      map = new AmCharts.AmMap()\n\n      map.projection = 'winkel3'\n      map.addTitle('Population of the World in 2011', 14, 1, 1, false)\n      map.addTitle('source: Gapminder', 11, 1, 1, 1, false)\n      map.areasSettings = {\n        unlistedAreasColor: '#eee',\n        unlistedAreasAlpha: 1,\n        outlineColor: '#fff',\n        outlineThickness: 2,\n      }\n      map.imagesSettings = {\n        balloonText: '<span style=\"font-size:14px\"><b>[[title]]</b>: [[value]]</span>',\n        alpha: 0.75,\n      }\n\n      let dataProvider = {\n        mapVar: AmCharts.maps.worldLow,\n        images: [],\n      }\n\n      // create circle for each country\n      // it's better to use circle square to show difference between values, not a radius\n      var maxSquare = maxBulletSize * maxBulletSize * 2 * Math.PI\n      var minSquare = minBulletSize * minBulletSize * 2 * Math.PI\n\n      // create circle for each country\n      this.mapData.data.forEach((dataItem) => {\n        var value = dataItem.value\n        // calculate size of a bubble\n        var square = (value - min) / (max - min) * (maxSquare - minSquare) + minSquare\n        if (square < minSquare) {\n          square = minSquare\n        }\n        var size = Math.sqrt(square / (Math.PI * 2))\n        var id = dataItem.code\n        dataProvider.images.push({\n          type: 'circle',\n          width: size,\n          height: size,\n          color: dataItem.color,\n          longitude: this.mapData.latlong[id].longitude,\n          latitude: this.mapData.latlong[id].latitude,\n          title: dataItem.name,\n          value: value,\n        })\n      })\n\n      map.dataProvider = dataProvider\n      map.write(this.$el)\n    },\n  },\n\n  mounted () {\n    this.drawMap()\n  },\n}\n</script>\n\n<style lang='scss'>\n@import '~ammap3/ammap/ammap.css';\n\n.bubble-map {\n  height: 100%;\n}\n</style>\n"]}]}