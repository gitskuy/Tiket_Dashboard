{"remainingRequest":"/home/ahmad/tiket/experiments/myproject/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ahmad/tiket/experiments/myproject/src/vuestic-theme/vuestic-components/vuestic-checkbox/VuesticCheckbox.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ahmad/tiket/experiments/myproject/src/vuestic-theme/vuestic-components/vuestic-checkbox/VuesticCheckbox.vue","mtime":1563286052641},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/cache-loader/dist/cjs.js","mtime":1563287225222},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'vuestic-checkbox',\n  props: {\n    label: String,\n    value: {\n      type: Boolean,\n      required: true\n    },\n    id: {\n      type: String\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    readonly: {\n      type: Boolean,\n      default: false,\n    },\n    errorMessages: {\n      type: [String, Array],\n      default: () => []\n    },\n    errorCount: {\n      type: Number,\n      default: 1\n    },\n    name: String,\n    error: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    return {\n      isFocused: false\n    }\n  },\n  computed: {\n    computedClass () {\n      return {\n        'vuestic-checkbox--selected': this.valueProxy,\n        'vuestic-checkbox--readonly': this.readonly,\n        'vuestic-checkbox--disabled': this.disabled,\n        'vuestic-checkbox--error': this.showError,\n        'vuestic-checkbox--onfocus': this.focused\n      }\n    },\n    computedErrorMessages () {\n      if (Array.isArray(this.errorMessages)) {\n        return this.errorMessages.slice(0, this.errorCount)\n      } else {\n        const arr = []\n        arr.push(this.errorMessages)\n        return arr\n      }\n    },\n    focused: {\n      set (isFocused) {\n        if (!this.disabled && !this.readonly) {\n          this.isFocused = isFocused\n        }\n      },\n      get () {\n        return this.isFocused\n      }\n    },\n    valueProxy: {\n      set (valueProxy) {\n        if (!this.readonly && !this.disabled) {\n          this.$emit('input', valueProxy)\n        }\n      },\n      get () {\n        return this.value\n      }\n    },\n    showError () {\n      // We make error active, if the error-message is not empty and checkbox is not disabled\n      if (!this.disabled) {\n        if (!(this.errorMessages.length === 0) || this.error) {\n          return true\n        }\n      }\n      return false\n    },\n  },\n  methods: {\n    toggleSelection () {\n      if (!this.disabled) {\n        this.valueProxy = !this.valueProxy\n      }\n    },\n  },\n}\n",{"version":3,"sources":["VuesticCheckbox.vue"],"names":[],"mappingsfile":"VuesticCheckbox.vue","sourceRoot":"src/vuestic-theme/vuestic-components/vuestic-checkbox","sourcesContent":["<template>\n  <div\n    class=\"vuestic-checkbox\"\n    :class=\"computedClass\"\n  >\n    <div\n      class=\"vuestic-checkbox__square\"\n      @click=\"toggleSelection(), focused = false\"\n      @mousedown=\"focused = true\"\n      :class=\"{'active': value}\"\n    >\n      <input\n        :id=\"id\"\n        readonly\n        @focus=\"focused = true\"\n        @mouseout=\"focused = false\"\n        @blur=\"focused = false\"\n        class=\"vuestic-checkbox__input\"\n        @keypress=\"toggleSelection()\"\n        :disabled=\"disabled\"\n      />\n      <i class=\"ion ion-md-checkmark vuestic-checkbox__icon-selected\" aria-hidden=\"true\"/>\n    </div>\n    <div\n      class=\"vuestic-checkbox__label-text\" @click=\"toggleSelection\">\n      <slot name=\"label\">\n        {{ label }}\n      </slot>\n    </div>\n    <div class=\"vuestic-checkbox__error-message-container\" v-if=\"showError\">\n        <span\n          class=\"vuestic-checkbox__error-message\"\n          v-for=\"(error, index) in computedErrorMessages\"\n          :key=\"index\"\n        >\n            {{ error }}\n        </span>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'vuestic-checkbox',\n  props: {\n    label: String,\n    value: {\n      type: Boolean,\n      required: true\n    },\n    id: {\n      type: String\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    readonly: {\n      type: Boolean,\n      default: false,\n    },\n    errorMessages: {\n      type: [String, Array],\n      default: () => []\n    },\n    errorCount: {\n      type: Number,\n      default: 1\n    },\n    name: String,\n    error: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    return {\n      isFocused: false\n    }\n  },\n  computed: {\n    computedClass () {\n      return {\n        'vuestic-checkbox--selected': this.valueProxy,\n        'vuestic-checkbox--readonly': this.readonly,\n        'vuestic-checkbox--disabled': this.disabled,\n        'vuestic-checkbox--error': this.showError,\n        'vuestic-checkbox--onfocus': this.focused\n      }\n    },\n    computedErrorMessages () {\n      if (Array.isArray(this.errorMessages)) {\n        return this.errorMessages.slice(0, this.errorCount)\n      } else {\n        const arr = []\n        arr.push(this.errorMessages)\n        return arr\n      }\n    },\n    focused: {\n      set (isFocused) {\n        if (!this.disabled && !this.readonly) {\n          this.isFocused = isFocused\n        }\n      },\n      get () {\n        return this.isFocused\n      }\n    },\n    valueProxy: {\n      set (valueProxy) {\n        if (!this.readonly && !this.disabled) {\n          this.$emit('input', valueProxy)\n        }\n      },\n      get () {\n        return this.value\n      }\n    },\n    showError () {\n      // We make error active, if the error-message is not empty and checkbox is not disabled\n      if (!this.disabled) {\n        if (!(this.errorMessages.length === 0) || this.error) {\n          return true\n        }\n      }\n      return false\n    },\n  },\n  methods: {\n    toggleSelection () {\n      if (!this.disabled) {\n        this.valueProxy = !this.valueProxy\n      }\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\">\n.vuestic-checkbox {\n  margin-bottom: $checkbox-between-items-margin;\n  display: flex;\n  flex-direction: column;\n  #{&}__input {\n    cursor: pointer;\n    height: 1.375rem;\n    position: absolute;\n    border-radius: 0.25rem;\n    width: 1.375rem;\n    color: $white;\n    border: solid 0.125rem $gray-light;\n    @at-root {\n      .vuestic-checkbox--selected#{&} {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        height: 1.4rem;\n        width: 1.4rem;\n        color: $white;\n        background-color: $vue-green;\n        border: 0;\n      }\n      .vuestic-checkbox--readonly#{&} {\n      }\n      .vuestic-checkbox--disabled#{&} {\n        border-color: $lighter-gray;\n        cursor: initial;\n        @at-root {\n          .vuestic-checkbox--selected#{&} {\n            opacity: 0.4;\n          }\n        }\n      }\n\n      .vuestic-checkbox--error#{&} {\n        border-color: $theme-red;\n      }\n    }\n  }\n  #{&}__label-text {\n    display: inline-block;\n    position: relative;\n    cursor: pointer;\n    padding-top: $checkbox-label-margin-top;\n    margin-left: $checkbox-between-label-margin;\n    @at-root {\n      .vuestic-checkbox--error#{&} {\n        color: $theme-red;\n      }\n    }\n  }\n  &__error-message {\n    display:inline-block;\n    vertical-align:middle;\n    color: $theme-red;\n    font-size: $font-size-mini;\n  }\n  &__icon-selected {\n    position: absolute;\n    color: $white;\n  }\n  &__error-message-container {\n    margin-left: 0.3rem; // we need to move container because of square container, which we use because of onFocus\n    display: flex;\n    flex-direction: column;\n  }\n  &__label-container {\n    margin-left: 2rem;\n  }\n  #{&}__square {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    width: 2rem;\n    height: 2rem;\n    position: absolute;\n    @at-root {\n      .vuestic-checkbox--disabled#{&} {\n        cursor: initial;\n      }\n      .vuestic-checkbox--onfocus#{&} {\n        background-color: $light-gray;\n        transition: all, 0.6s, ease-in;\n        border-radius: 5rem;\n        &.active {\n          background-color: $lighter-green;\n        }\n      }\n    }\n  }\n  &__content {\n    flex-direction: row;\n  }\n}\n</style>\n"]}]}