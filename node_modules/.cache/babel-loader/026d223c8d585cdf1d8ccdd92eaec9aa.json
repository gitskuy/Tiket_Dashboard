{"remainingRequest":"/home/ahmad/tiket/experiments/myproject/node_modules/thread-loader/dist/cjs.js!/home/ahmad/tiket/experiments/myproject/node_modules/babel-loader/lib/index.js!/home/ahmad/tiket/experiments/myproject/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ahmad/tiket/experiments/myproject/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ahmad/tiket/experiments/myproject/src/vuestic-theme/vuestic-components/vuestic-progress-bar/progress-types/CircleProgressBar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ahmad/tiket/experiments/myproject/src/vuestic-theme/vuestic-components/vuestic-progress-bar/progress-types/CircleProgressBar.vue","mtime":1563286052653},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/cache-loader/dist/cjs.js","mtime":1563287225222},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/cache-loader/dist/cjs.js","mtime":1563287225222},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { colorConfig, VuesticTheme } from './../../vuestic-color-picker/VuesticTheme';\nexport default {\n  data: function data() {\n    return {\n      animatedValue: 0,\n      animateValueInterval: null\n    };\n  },\n  props: {\n    value: {\n      type: Number,\n      default: 0\n    },\n    text: {\n      type: String,\n      default: ''\n    },\n    theme: {\n      type: String,\n      default: 'Primary'\n    },\n    // TODO Questionable. Ideally we should have transparent background.\n    backgroundTheme: {\n      type: String,\n      default: 'White'\n    },\n    startAnimated: {\n      type: Boolean,\n      default: false\n    },\n    // Time it would take for animation to go from 0 to 100.\n    animationInterval: {\n      type: Number,\n      default: 2000\n    }\n  },\n  created: function created() {\n    if (!this.startAnimated) {\n      this.setAnimatedValue(Math.round(this.value));\n    }\n  },\n  watch: {\n    value: {\n      immediate: true,\n      handler: function handler() {\n        var _this = this;\n\n        // Only one such interval is meant to be on.\n        if (this.animateValueInterval) {\n          return;\n        } // We're updating `animatedValue` to follow `value` change.\n        // `animatedValue` is used to display actual bar.\n\n\n        this.animateValueInterval = setInterval(function () {\n          if (_this.value === _this.animatedValue) {\n            clearInterval(_this.animateValueInterval);\n            _this.animateValueInterval = null;\n            return;\n          }\n\n          var deltaValue = _this.value < _this.animatedValue ? -1 : 1;\n\n          _this.setAnimatedValue(_this.animatedValue + deltaValue);\n        }, this.animationInterval / 100);\n      }\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.animateValueInterval) {\n      clearInterval(this.animateValueInterval);\n      this.animateValueInterval = null;\n    }\n  },\n  methods: {\n    setAnimatedValue: function setAnimatedValue(value) {\n      if (value < 0) {\n        this.animatedValue = 0;\n        return;\n      }\n\n      if (value > 100) {\n        this.animatedValue = 100;\n        return;\n      }\n\n      this.animatedValue = value;\n    }\n  },\n  computed: {\n    backgroundImage: function backgroundImage() {\n      var theme = colorConfig[VuesticTheme[this.theme]];\n      var value = this.animatedValue;\n      var backgroundTheme = colorConfig[VuesticTheme[this.backgroundTheme]];\n\n      if (value < 50) {\n        var nextDeg = 90 + 3.6 * value + 'deg';\n        return \"linear-gradient(90deg, \".concat(backgroundTheme, \" 50%, transparent 50%, transparent), \") + \"linear-gradient(\".concat(nextDeg, \", \").concat(theme, \" 50%, \").concat(backgroundTheme, \" 50%, \").concat(backgroundTheme, \")\");\n      } else {\n        var _nextDeg = -90 + 3.6 * (value - 50) + 'deg';\n\n        return \"linear-gradient(\".concat(_nextDeg, \", \").concat(theme, \" 50%, transparent 50%, transparent), \") + \"linear-gradient(270deg, \".concat(theme, \" 50%, \").concat(backgroundTheme, \" 50%, \").concat(backgroundTheme, \")\");\n      }\n    },\n    circleBarStyle: function circleBarStyle() {\n      return {\n        backgroundColor: colorConfig[VuesticTheme[this.backgroundTheme]],\n        color: colorConfig[VuesticTheme[this.theme]]\n      };\n    }\n  }\n};",{"version":3,"sources":["CircleProgressBar.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA,SACA,WADA,EAEA,YAFA,QAGA,2CAHA;AAKA,eAAA;AACA,MADA,kBACA;AACA,WAAA;AACA,qBAAA,CADA;AAEA,4BAAA;AAFA,KAAA;AAIA,GANA;AAOA,SAAA;AACA,WAAA;AACA,YAAA,MADA;AAEA,eAAA;AAFA,KADA;AAKA,UAAA;AACA,YAAA,MADA;AAEA,eAAA;AAFA,KALA;AASA,WAAA;AACA,YAAA,MADA;AAEA,eAAA;AAFA,KATA;AAaA;AACA,qBAAA;AACA,YAAA,MADA;AAEA,eAAA;AAFA,KAdA;AAkBA,mBAAA;AACA,YAAA,OADA;AAEA,eAAA;AAFA,KAlBA;AAsBA;AACA,uBAAA;AACA,YAAA,MADA;AAEA,eAAA;AAFA;AAvBA,GAPA;AAmCA,SAnCA,qBAmCA;AACA,QAAA,CAAA,KAAA,aAAA,EAAA;AACA,WAAA,gBAAA,CAAA,KAAA,KAAA,CAAA,KAAA,KAAA,CAAA;AACA;AACA,GAvCA;AAwCA,SAAA;AACA,WAAA;AACA,iBAAA,IADA;AAEA,aAFA,qBAEA;AAAA;;AACA;AACA,YAAA,KAAA,oBAAA,EAAA;AACA;AACA,SAJA,CAKA;AACA;;;AACA,aAAA,oBAAA,GAAA,YAAA,YAAA;AACA,cAAA,MAAA,KAAA,KAAA,MAAA,aAAA,EAAA;AACA,0BAAA,MAAA,oBAAA;AACA,kBAAA,oBAAA,GAAA,IAAA;AACA;AACA;;AACA,cAAA,aAAA,MAAA,KAAA,GAAA,MAAA,aAAA,GAAA,CAAA,CAAA,GAAA,CAAA;;AACA,gBAAA,gBAAA,CAAA,MAAA,aAAA,GAAA,UAAA;AACA,SARA,EAQA,KAAA,iBAAA,GAAA,GARA,CAAA;AASA;AAlBA;AADA,GAxCA;AA8DA,eA9DA,2BA8DA;AACA,QAAA,KAAA,oBAAA,EAAA;AACA,oBAAA,KAAA,oBAAA;AACA,WAAA,oBAAA,GAAA,IAAA;AACA;AACA,GAnEA;AAoEA,WAAA;AACA,oBADA,4BACA,KADA,EACA;AACA,UAAA,QAAA,CAAA,EAAA;AACA,aAAA,aAAA,GAAA,CAAA;AACA;AACA;;AACA,UAAA,QAAA,GAAA,EAAA;AACA,aAAA,aAAA,GAAA,GAAA;AACA;AACA;;AACA,WAAA,aAAA,GAAA,KAAA;AACA;AAXA,GApEA;AAiFA,YAAA;AACA,mBADA,6BACA;AACA,UAAA,QAAA,YAAA,aAAA,KAAA,KAAA,CAAA,CAAA;AACA,UAAA,QAAA,KAAA,aAAA;AACA,UAAA,kBAAA,YAAA,aAAA,KAAA,eAAA,CAAA,CAAA;;AAEA,UAAA,QAAA,EAAA,EAAA;AACA,YAAA,UAAA,KAAA,MAAA,KAAA,GAAA,KAAA;AACA,eAAA,iCAAA,eAAA,uEACA,OADA,eACA,KADA,mBACA,eADA,mBACA,eADA,MAAA;AAEA,OAJA,MAIA;AACA,YAAA,WAAA,CAAA,EAAA,GAAA,OAAA,QAAA,EAAA,CAAA,GAAA,KAAA;;AACA,eAAA,0BAAA,QAAA,eAAA,KAAA,+EACA,KADA,mBACA,eADA,mBACA,eADA,MAAA;AAEA;AACA,KAfA;AAgBA,kBAhBA,4BAgBA;AACA,aAAA;AACA,yBAAA,YAAA,aAAA,KAAA,eAAA,CAAA,CADA;AAEA,eAAA,YAAA,aAAA,KAAA,KAAA,CAAA;AAFA,OAAA;AAIA;AArBA;AAjFA,CAAA","sourcesContent":["<template>\n  <div\n    class=\"circle-bar circle-bar__progress-bar\"\n    :style=\"'background-image: ' + backgroundImage\"\n  >\n    <div class=\"circle-bar__overlay\" :style=\"circleBarStyle\">\n      {{ text ? text : value + '%'}}\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  colorConfig,\n  VuesticTheme,\n} from './../../vuestic-color-picker/VuesticTheme'\n\nexport default {\n  data () {\n    return {\n      animatedValue: 0,\n      animateValueInterval: null,\n    }\n  },\n  props: {\n    value: {\n      type: Number,\n      default: 0,\n    },\n    text: {\n      type: String,\n      default: '',\n    },\n    theme: {\n      type: String,\n      default: 'Primary',\n    },\n    // TODO Questionable. Ideally we should have transparent background.\n    backgroundTheme: {\n      type: String,\n      default: 'White',\n    },\n    startAnimated: {\n      type: Boolean,\n      default: false,\n    },\n    // Time it would take for animation to go from 0 to 100.\n    animationInterval: {\n      type: Number,\n      default: 2000,\n    },\n  },\n  created () {\n    if (!this.startAnimated) {\n      this.setAnimatedValue(Math.round(this.value))\n    }\n  },\n  watch: {\n    value: {\n      immediate: true,\n      handler () {\n        // Only one such interval is meant to be on.\n        if (this.animateValueInterval) {\n          return\n        }\n        // We're updating `animatedValue` to follow `value` change.\n        // `animatedValue` is used to display actual bar.\n        this.animateValueInterval = setInterval(() => {\n          if (this.value === this.animatedValue) {\n            clearInterval(this.animateValueInterval)\n            this.animateValueInterval = null\n            return\n          }\n          const deltaValue = this.value < this.animatedValue ? -1 : 1\n          this.setAnimatedValue(this.animatedValue + deltaValue)\n        }, this.animationInterval / 100)\n      },\n    },\n  },\n  beforeDestroy () {\n    if (this.animateValueInterval) {\n      clearInterval(this.animateValueInterval)\n      this.animateValueInterval = null\n    }\n  },\n  methods: {\n    setAnimatedValue (value) {\n      if (value < 0) {\n        this.animatedValue = 0\n        return\n      }\n      if (value > 100) {\n        this.animatedValue = 100\n        return\n      }\n      this.animatedValue = value\n    },\n  },\n  computed: {\n    backgroundImage () {\n      const theme = colorConfig[VuesticTheme[this.theme]]\n      const value = this.animatedValue\n      const backgroundTheme = colorConfig[VuesticTheme[this.backgroundTheme]]\n\n      if (value < 50) {\n        const nextDeg = 90 + (3.6 * value) + 'deg'\n        return `linear-gradient(90deg, ${backgroundTheme} 50%, transparent 50%, transparent), ` +\n          `linear-gradient(${nextDeg}, ${theme} 50%, ${backgroundTheme} 50%, ${backgroundTheme})`\n      } else {\n        const nextDeg = -90 + (3.6 * (value - 50)) + 'deg'\n        return `linear-gradient(${nextDeg}, ${theme} 50%, transparent 50%, transparent), ` +\n          `linear-gradient(270deg, ${theme} 50%, ${backgroundTheme} 50%, ${backgroundTheme})`\n      }\n    },\n    circleBarStyle () {\n      return {\n        backgroundColor: colorConfig[VuesticTheme[this.backgroundTheme]],\n        color: colorConfig[VuesticTheme[this.theme]],\n      }\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\">\n.circle-bar {\n  $step: 1;\n  $loops: 100 / $step;\n  $increment: 360 / $loops;\n  $half: round($loops / 2);\n\n  font-size: $progress-bar-value-font-size;\n  font-weight: $font-weight-bold;\n\n  &--animated {\n    transition: background-color ease .5s, width 3s linear !important;\n  }\n\n  &.circle-bar__progress-bar {\n    transition: background-color ease .5s, width 3s linear !important;\n    width: $progress-bar-circle-diameter;\n    height: $progress-bar-circle-diameter;\n    padding-left: $progress-bar-circle-bw;\n    padding-top: $progress-bar-circle-bw;\n    border-radius: 50%;\n    border-width: 0;\n  }\n\n  .circle-bar__overlay {\n    width: $progress-bar-circle-overlay-diameter;\n    height: $progress-bar-circle-diameter - 2*$progress-bar-circle-bw;\n    border-radius: 50%;\n    border-width: 0;\n    @include va-flex-center();\n    text-align: center;\n  }\n\n  & &--disabled {\n    opacity: 0.5\n  }\n}\n</style>\n"],"sourceRoot":"src/vuestic-theme/vuestic-components/vuestic-progress-bar/progress-types"}]}