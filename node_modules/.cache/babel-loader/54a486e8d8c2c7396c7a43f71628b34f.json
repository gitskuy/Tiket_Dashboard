{"remainingRequest":"/home/ahmad/tiket/experiments/tiketfinalpush/Tiket_Dashboard/node_modules/babel-loader/lib/index.js!/home/ahmad/tiket/experiments/tiketfinalpush/Tiket_Dashboard/src/data/charts/LineChartData.js","dependencies":[{"path":"/home/ahmad/tiket/experiments/tiketfinalpush/Tiket_Dashboard/src/data/charts/LineChartData.js","mtime":1563286052637},{"path":"/home/ahmad/tiket/experiments/tiketfinalpush/Tiket_Dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1563287225222},{"path":"/home/ahmad/tiket/experiments/tiketfinalpush/Tiket_Dashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport utils from 'services/utils';\nimport store from 'vuex-store';\nvar palette = store.getters.palette;\n\nvar generateValue = function generateValue() {\n  return Math.floor(Math.random() * 100);\n};\n\nvar generateYLabels = function generateYLabels() {\n  var flip = !!Math.floor(Math.random() * 2);\n  return flip ? ['Debit', 'Credit'] : ['Credit', 'Debit'];\n};\n\nvar generateArray = function generateArray(length) {\n  return Array.from(Array(length), generateValue);\n};\n\nvar getSize = function getSize() {\n  var minSize = 4;\n  return minSize + Math.floor(Math.random() * 3);\n};\n\nexport var getLineChartData = function getLineChartData() {\n  var size = getSize();\n  var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n  var yLabels = generateYLabels();\n  return {\n    labels: months.splice(0, size),\n    datasets: [{\n      label: yLabels[0],\n      backgroundColor: utils.hex2rgb(palette.primary, 0.6).css,\n      borderColor: palette.transparent,\n      data: generateArray(size)\n    }, {\n      label: yLabels[1],\n      backgroundColor: utils.hex2rgb(palette.info, 0.6).css,\n      borderColor: palette.transparent,\n      data: generateArray(size)\n    }]\n  };\n};",{"version":3,"sources":["/home/ahmad/tiket/experiments/tiketfinalpush/Tiket_Dashboard/src/data/charts/LineChartData.js"],"names":["utils","store","palette","getters","generateValue","Math","floor","random","generateYLabels","flip","generateArray","length","Array","from","getSize","minSize","getLineChartData","size","months","yLabels","labels","splice","datasets","label","backgroundColor","hex2rgb","primary","css","borderColor","transparent","data","info"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AAEA,IAAIC,UAAUD,MAAME,OAAN,CAAcD,OAA5B;;AAEA,IAAME,gBAAgB,SAAhBA,aAAgB,GAAM;AAC1B,SAAOC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgB,GAA3B,CAAP;AACD,CAFD;;AAIA,IAAMC,kBAAkB,SAAlBA,eAAkB,GAAM;AAC5B,MAAMC,OAAO,CAAC,CAACJ,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgB,CAA3B,CAAf;AACA,SAAOE,OAAO,CAAC,OAAD,EAAU,QAAV,CAAP,GAA6B,CAAC,QAAD,EAAW,OAAX,CAApC;AACD,CAHD;;AAKA,IAAMC,gBAAgB,SAAhBA,aAAgB,CAACC,MAAD,EAAY;AAChC,SAAOC,MAAMC,IAAN,CAAWD,MAAMD,MAAN,CAAX,EAA0BP,aAA1B,CAAP;AACD,CAFD;;AAIA,IAAMU,UAAU,SAAVA,OAAU,GAAM;AACpB,MAAMC,UAAU,CAAhB;AACA,SAAOA,UAAUV,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgB,CAA3B,CAAjB;AACD,CAHD;;AAKA,OAAO,IAAMS,mBAAmB,SAAnBA,gBAAmB,GAAM;AACpC,MAAMC,OAAOH,SAAb;AACA,MAAMI,SAAS,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,EAAiD,MAAjD,EAAyD,MAAzD,CAAf;AACA,MAAMC,UAAUX,iBAAhB;AAEA,SAAO;AACLY,YAAQF,OAAOG,MAAP,CAAc,CAAd,EAAiBJ,IAAjB,CADH;AAELK,cAAU,CACR;AACEC,aAAOJ,QAAQ,CAAR,CADT;AAEEK,uBAAiBxB,MAAMyB,OAAN,CAAcvB,QAAQwB,OAAtB,EAA+B,GAA/B,EAAoCC,GAFvD;AAGEC,mBAAa1B,QAAQ2B,WAHvB;AAIEC,YAAMpB,cAAcO,IAAd;AAJR,KADQ,EAOR;AACEM,aAAOJ,QAAQ,CAAR,CADT;AAEEK,uBAAiBxB,MAAMyB,OAAN,CAAcvB,QAAQ6B,IAAtB,EAA4B,GAA5B,EAAiCJ,GAFpD;AAGEC,mBAAa1B,QAAQ2B,WAHvB;AAIEC,YAAMpB,cAAcO,IAAd;AAJR,KAPQ;AAFL,GAAP;AAiBD,CAtBM","sourcesContent":["import utils from 'services/utils'\nimport store from 'vuex-store'\n\nlet palette = store.getters.palette\n\nconst generateValue = () => {\n  return Math.floor(Math.random() * 100)\n}\n\nconst generateYLabels = () => {\n  const flip = !!Math.floor(Math.random() * 2)\n  return flip ? ['Debit', 'Credit'] : ['Credit', 'Debit']\n}\n\nconst generateArray = (length) => {\n  return Array.from(Array(length), generateValue)\n}\n\nconst getSize = () => {\n  const minSize = 4\n  return minSize + Math.floor(Math.random() * 3)\n}\n\nexport const getLineChartData = () => {\n  const size = getSize()\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July']\n  const yLabels = generateYLabels()\n\n  return {\n    labels: months.splice(0, size),\n    datasets: [\n      {\n        label: yLabels[0],\n        backgroundColor: utils.hex2rgb(palette.primary, 0.6).css,\n        borderColor: palette.transparent,\n        data: generateArray(size),\n      },\n      {\n        label: yLabels[1],\n        backgroundColor: utils.hex2rgb(palette.info, 0.6).css,\n        borderColor: palette.transparent,\n        data: generateArray(size),\n      },\n    ],\n  }\n}\n"]}]}