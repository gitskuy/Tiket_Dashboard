{"remainingRequest":"/home/ahmad/tiket/experiments/myproject/node_modules/thread-loader/dist/cjs.js!/home/ahmad/tiket/experiments/myproject/node_modules/babel-loader/lib/index.js!/home/ahmad/tiket/experiments/myproject/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ahmad/tiket/experiments/myproject/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ahmad/tiket/experiments/myproject/src/vuestic-theme/vuestic-components/vuestic-multi-select/VuesticMultiSelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ahmad/tiket/experiments/myproject/src/vuestic-theme/vuestic-components/vuestic-multi-select/VuesticMultiSelect.vue","mtime":1563286052653},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/cache-loader/dist/cjs.js","mtime":1563287225222},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/cache-loader/dist/cjs.js","mtime":1563287225222},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Dropdown from 'vuestic-directives/Dropdown';\nimport Scrollbar from '../vuestic-scrollbar/VuesticScrollbar.vue';\nexport default {\n  name: 'vuestic-multi-select',\n  components: {\n    Scrollbar: Scrollbar\n  },\n  directives: {\n    dropdown: Dropdown\n  },\n  data: function data() {\n    return {\n      displayValue: '',\n      validated: false\n    };\n  },\n  props: {\n    label: String,\n    itemsChosenPlaceholder: {\n      type: String,\n      default: 'chosen'\n    },\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n    options: Array,\n    value: Array,\n    optionKey: String,\n    required: {\n      type: Boolean,\n      default: false\n    },\n    name: {\n      type: String,\n      default: 'multiselect'\n    }\n  },\n  mounted: function mounted() {\n    this.$emit('input', this.value);\n  },\n  updated: function updated() {\n    this.updateDisplayValue(this.value);\n  },\n  methods: {\n    unselectOptions: function unselectOptions() {\n      this.value.splice(0, this.value.length);\n      this.displayValue = '';\n      this.$emit('input', this.value);\n    },\n    toggleSelection: function toggleSelection(option) {\n      var newVal = this.isOptionSelected(option) ? this.deselectOption(option) : this.selectOption(option);\n      this.updateDisplayValue(newVal);\n      this.$emit('input', newVal);\n    },\n    isOptionSelected: function isOptionSelected(option) {\n      return this.value.includes(option);\n    },\n    selectOption: function selectOption(option) {\n      return this.value.concat(option);\n    },\n    deselectOption: function deselectOption(option) {\n      return this.value.filter(function (item) {\n        return item !== option;\n      });\n    },\n    updateDisplayValue: function updateDisplayValue(newVal) {\n      var _this = this;\n\n      if (newVal.length > 2) {\n        this.displayValue = \"\".concat(newVal.length, \"/\").concat(this.options.length, \" \").concat(this.itemsChosenPlaceholder);\n      } else {\n        this.displayValue = (this.optionKey ? newVal.map(function (item) {\n          return item[_this.optionKey];\n        }) : newVal).join(', ');\n      }\n    },\n    validate: function validate() {\n      this.validated = true;\n    },\n    isValid: function isValid() {\n      var isValid = true;\n\n      if (this.required) {\n        isValid = !!this.displayValue;\n      }\n\n      return isValid;\n    },\n    hasErrors: function hasErrors() {\n      var hasErrors = false;\n\n      if (this.required) {\n        hasErrors = this.validated && !this.displayValue;\n      }\n\n      return hasErrors;\n    },\n    showRequiredError: function showRequiredError() {\n      return \"The \".concat(this.name, \" field is required\");\n    }\n  },\n  computed: {\n    isClearable: function isClearable() {\n      return this.clearable && this.value.length !== 0 && this.displayValue !== '';\n    }\n  }\n};",{"version":3,"sources":["VuesticMultiSelect.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div\n    class=\"form-group with-icon-right dropdown select-form-group multiselect-form-group\"\n    v-dropdown\n    :class=\"{'has-error': hasErrors()}\">\n    <div class=\"input-group dropdown-toggle\">\n      <input\n        readonly\n        :class=\"{'has-value': !!displayValue}\"\n        v-bind:value=\"displayValue\"\n        required/>\n      <label class=\"control-label\">{{label}}</label><i class=\"bar\"></i>\n      <small v-show=\"hasErrors()\" class=\"help text-danger\">{{\n        showRequiredError() }}\n      </small>\n      <i class=\"ion ion-ios-arrow-down icon-right input-icon dropdown-ion\"></i>\n    </div>\n    <div v-if=\"isClearable\">\n      <i\n        class=\"fa fa-close icon-cross icon-right input-icon multiselect-form-group__unselect\"\n        @click=\"unselectOptions\"\n      />\n    </div>\n    <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n      <scrollbar ref=\"scrollbar\">\n        <div class=\"dropdown-menu-content\">\n          <div\n            class=\"dropdown-item\"\n            :class=\"{'selected': isOptionSelected(option)}\"\n            v-for=\"(option, index) in options\"\n            :key=\"index\"\n            @click=\"toggleSelection(option)\"\n          >\n            <span\n              class=\"ellipsis\">{{optionKey ? option[optionKey] : option}}</span>\n            <i class=\"fa fa-check selected-icon\"></i>\n          </div>\n        </div>\n      </scrollbar>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Dropdown from 'vuestic-directives/Dropdown'\nimport Scrollbar from '../vuestic-scrollbar/VuesticScrollbar.vue'\n\nexport default {\n  name: 'vuestic-multi-select',\n  components: {\n    Scrollbar,\n  },\n  directives: {\n    dropdown: Dropdown,\n  },\n  data () {\n    return {\n      displayValue: '',\n      validated: false,\n    }\n  },\n  props: {\n    label: String,\n    itemsChosenPlaceholder: {\n      type: String,\n      default: 'chosen',\n    },\n    clearable: {\n      type: Boolean,\n      default: true,\n    },\n    options: Array,\n    value: Array,\n    optionKey: String,\n    required: {\n      type: Boolean,\n      default: false,\n    },\n    name: {\n      type: String,\n      default: 'multiselect',\n    },\n  },\n  mounted () {\n    this.$emit('input', this.value)\n  },\n\n  updated: function () {\n    this.updateDisplayValue(this.value)\n  },\n\n  methods: {\n    unselectOptions () {\n      this.value.splice(0, this.value.length)\n      this.displayValue = ''\n      this.$emit('input', this.value)\n    },\n    toggleSelection (option) {\n      let newVal = this.isOptionSelected(option) ? this.deselectOption(option) : this.selectOption(option)\n      this.updateDisplayValue(newVal)\n      this.$emit('input', newVal)\n    },\n    isOptionSelected (option) {\n      return this.value.includes(option)\n    },\n    selectOption (option) {\n      return this.value.concat(option)\n    },\n    deselectOption (option) {\n      return this.value.filter(item => item !== option)\n    },\n    updateDisplayValue (newVal) {\n      if (newVal.length > 2) {\n        this.displayValue = `${newVal.length}/${this.options.length} ${this.itemsChosenPlaceholder}`\n      } else {\n        this.displayValue = (this.optionKey ? newVal.map(item => item[this.optionKey]) : newVal).join(', ')\n      }\n    },\n    validate () {\n      this.validated = true\n    },\n    isValid () {\n      let isValid = true\n      if (this.required) {\n        isValid = !!this.displayValue\n      }\n      return isValid\n    },\n    hasErrors () {\n      let hasErrors = false\n      if (this.required) {\n        hasErrors = this.validated && !this.displayValue\n      }\n      return hasErrors\n    },\n    showRequiredError () {\n      return `The ${this.name} field is required`\n    },\n  },\n  computed: {\n    isClearable () {\n      return (this.clearable && this.value.length !== 0 && this.displayValue !== '')\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.multiselect-form-group {\n  &__unselect {\n    margin-right: 20px;\n    cursor: pointer;\n  }\n\n  .dropdown-ion {\n    top: 12px;\n    cursor: pointer;\n  }\n\n  .dropdown-menu {\n    padding: 0;\n    .vuestic-scrollbar {\n      max-height: $dropdown-item-height * 4;\n    }\n  }\n}\n</style>\n"],"sourceRoot":"src/vuestic-theme/vuestic-components/vuestic-multi-select"}]}