{"remainingRequest":"/home/ahmad/tiket/experiments/myproject/node_modules/thread-loader/dist/cjs.js!/home/ahmad/tiket/experiments/myproject/node_modules/babel-loader/lib/index.js!/home/ahmad/tiket/experiments/myproject/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ahmad/tiket/experiments/myproject/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ahmad/tiket/experiments/myproject/src/components/maps/bubble-maps/BubbleMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ahmad/tiket/experiments/myproject/src/components/maps/bubble-maps/BubbleMap.vue","mtime":1563286052629},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/cache-loader/dist/cjs.js","mtime":1563287225222},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/cache-loader/dist/cjs.js","mtime":1563287225222},{"path":"/home/ahmad/tiket/experiments/myproject/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\nimport 'amcharts3';\nimport 'amcharts3/amcharts/plugins/responsive/responsive.js';\nimport 'amcharts3/amcharts/serial.js';\nimport 'amcharts3/amcharts/themes/light';\nimport 'ammap3';\nimport 'ammap3/ammap/maps/js/worldLow';\nexport default {\n  name: 'bubble-map',\n  props: ['mapData'],\n  methods: {\n    drawMap: function drawMap() {\n      var _this = this;\n\n      /* global AmCharts */\n      var map;\n      var minBulletSize = 3;\n      var maxBulletSize = 70;\n      var min = Infinity;\n      var max = -Infinity;\n      AmCharts.theme = AmCharts.themes.light; // get min and max values\n\n      this.mapData.data.forEach(function (dataItem) {\n        var value = dataItem.value;\n\n        if (value < min) {\n          min = value;\n        }\n\n        if (value > max) {\n          max = value;\n        }\n      }); // build map\n\n      map = new AmCharts.AmMap();\n      map.projection = 'winkel3';\n      map.addTitle('Population of the World in 2011', 14, 1, 1, false);\n      map.addTitle('source: Gapminder', 11, 1, 1, 1, false);\n      map.areasSettings = {\n        unlistedAreasColor: '#eee',\n        unlistedAreasAlpha: 1,\n        outlineColor: '#fff',\n        outlineThickness: 2\n      };\n      map.imagesSettings = {\n        balloonText: '<span style=\"font-size:14px\"><b>[[title]]</b>: [[value]]</span>',\n        alpha: 0.75\n      };\n      var dataProvider = {\n        mapVar: AmCharts.maps.worldLow,\n        images: [] // create circle for each country\n        // it's better to use circle square to show difference between values, not a radius\n\n      };\n      var maxSquare = maxBulletSize * maxBulletSize * 2 * Math.PI;\n      var minSquare = minBulletSize * minBulletSize * 2 * Math.PI; // create circle for each country\n\n      this.mapData.data.forEach(function (dataItem) {\n        var value = dataItem.value; // calculate size of a bubble\n\n        var square = (value - min) / (max - min) * (maxSquare - minSquare) + minSquare;\n\n        if (square < minSquare) {\n          square = minSquare;\n        }\n\n        var size = Math.sqrt(square / (Math.PI * 2));\n        var id = dataItem.code;\n        dataProvider.images.push({\n          type: 'circle',\n          width: size,\n          height: size,\n          color: dataItem.color,\n          longitude: _this.mapData.latlong[id].longitude,\n          latitude: _this.mapData.latlong[id].latitude,\n          title: dataItem.name,\n          value: value\n        });\n      });\n      map.dataProvider = dataProvider;\n      map.write(this.$el);\n    }\n  },\n  mounted: function mounted() {\n    this.drawMap();\n  }\n};",{"version":3,"sources":["BubbleMap.vue"],"names":[],"mappings":";;;;;;AAKA,OAAA,WAAA;AACA,OAAA,qDAAA;AACA,OAAA,8BAAA;AACA,OAAA,iCAAA;AAEA,OAAA,QAAA;AACA,OAAA,+BAAA;AAEA,eAAA;AACA,QAAA,YADA;AAGA,SAAA,CAAA,SAAA,CAHA;AAKA,WAAA;AACA,WADA,qBACA;AAAA;;AACA;AACA,UAAA,GAAA;AACA,UAAA,gBAAA,CAAA;AACA,UAAA,gBAAA,EAAA;AACA,UAAA,MAAA,QAAA;AACA,UAAA,MAAA,CAAA,QAAA;AACA,eAAA,KAAA,GAAA,SAAA,MAAA,CAAA,KAAA,CAPA,CASA;;AACA,WAAA,OAAA,CAAA,IAAA,CAAA,OAAA,CAAA,UAAA,QAAA,EAAA;AACA,YAAA,QAAA,SAAA,KAAA;;AACA,YAAA,QAAA,GAAA,EAAA;AACA,gBAAA,KAAA;AACA;;AACA,YAAA,QAAA,GAAA,EAAA;AACA,gBAAA,KAAA;AACA;AACA,OARA,EAVA,CAoBA;;AACA,YAAA,IAAA,SAAA,KAAA,EAAA;AAEA,UAAA,UAAA,GAAA,SAAA;AACA,UAAA,QAAA,CAAA,iCAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;AACA,UAAA,QAAA,CAAA,mBAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;AACA,UAAA,aAAA,GAAA;AACA,4BAAA,MADA;AAEA,4BAAA,CAFA;AAGA,sBAAA,MAHA;AAIA,0BAAA;AAJA,OAAA;AAMA,UAAA,cAAA,GAAA;AACA,qBAAA,iEADA;AAEA,eAAA;AAFA,OAAA;AAKA,UAAA,eAAA;AACA,gBAAA,SAAA,IAAA,CAAA,QADA;AAEA,gBAAA,EAFA,CAKA;AACA;;AANA,OAAA;AAOA,UAAA,YAAA,gBAAA,aAAA,GAAA,CAAA,GAAA,KAAA,EAAA;AACA,UAAA,YAAA,gBAAA,aAAA,GAAA,CAAA,GAAA,KAAA,EAAA,CA7CA,CA+CA;;AACA,WAAA,OAAA,CAAA,IAAA,CAAA,OAAA,CAAA,UAAA,QAAA,EAAA;AACA,YAAA,QAAA,SAAA,KAAA,CADA,CAEA;;AACA,YAAA,SAAA,CAAA,QAAA,GAAA,KAAA,MAAA,GAAA,KAAA,YAAA,SAAA,IAAA,SAAA;;AACA,YAAA,SAAA,SAAA,EAAA;AACA,mBAAA,SAAA;AACA;;AACA,YAAA,OAAA,KAAA,IAAA,CAAA,UAAA,KAAA,EAAA,GAAA,CAAA,CAAA,CAAA;AACA,YAAA,KAAA,SAAA,IAAA;AACA,qBAAA,MAAA,CAAA,IAAA,CAAA;AACA,gBAAA,QADA;AAEA,iBAAA,IAFA;AAGA,kBAAA,IAHA;AAIA,iBAAA,SAAA,KAJA;AAKA,qBAAA,MAAA,OAAA,CAAA,OAAA,CAAA,EAAA,EAAA,SALA;AAMA,oBAAA,MAAA,OAAA,CAAA,OAAA,CAAA,EAAA,EAAA,QANA;AAOA,iBAAA,SAAA,IAPA;AAQA,iBAAA;AARA,SAAA;AAUA,OAnBA;AAqBA,UAAA,YAAA,GAAA,YAAA;AACA,UAAA,KAAA,CAAA,KAAA,GAAA;AACA;AAxEA,GALA;AAgFA,SAhFA,qBAgFA;AACA,SAAA,OAAA;AACA;AAlFA,CAAA","sourcesContent":["<template>\n  <div class=\"bubble-map\"></div>\n</template>\n\n<script>\nimport 'amcharts3'\nimport 'amcharts3/amcharts/plugins/responsive/responsive.js'\nimport 'amcharts3/amcharts/serial.js'\nimport 'amcharts3/amcharts/themes/light'\n\nimport 'ammap3'\nimport 'ammap3/ammap/maps/js/worldLow'\n\nexport default {\n  name: 'bubble-map',\n\n  props: ['mapData'],\n\n  methods: {\n    drawMap () {\n      /* global AmCharts */\n      let map\n      let minBulletSize = 3\n      let maxBulletSize = 70\n      let min = Infinity\n      let max = -Infinity\n      AmCharts.theme = AmCharts.themes.light\n\n      // get min and max values\n      this.mapData.data.forEach((dataItem) => {\n        let value = dataItem.value\n        if (value < min) {\n          min = value\n        }\n        if (value > max) {\n          max = value\n        }\n      })\n\n      // build map\n      map = new AmCharts.AmMap()\n\n      map.projection = 'winkel3'\n      map.addTitle('Population of the World in 2011', 14, 1, 1, false)\n      map.addTitle('source: Gapminder', 11, 1, 1, 1, false)\n      map.areasSettings = {\n        unlistedAreasColor: '#eee',\n        unlistedAreasAlpha: 1,\n        outlineColor: '#fff',\n        outlineThickness: 2,\n      }\n      map.imagesSettings = {\n        balloonText: '<span style=\"font-size:14px\"><b>[[title]]</b>: [[value]]</span>',\n        alpha: 0.75,\n      }\n\n      let dataProvider = {\n        mapVar: AmCharts.maps.worldLow,\n        images: [],\n      }\n\n      // create circle for each country\n      // it's better to use circle square to show difference between values, not a radius\n      var maxSquare = maxBulletSize * maxBulletSize * 2 * Math.PI\n      var minSquare = minBulletSize * minBulletSize * 2 * Math.PI\n\n      // create circle for each country\n      this.mapData.data.forEach((dataItem) => {\n        var value = dataItem.value\n        // calculate size of a bubble\n        var square = (value - min) / (max - min) * (maxSquare - minSquare) + minSquare\n        if (square < minSquare) {\n          square = minSquare\n        }\n        var size = Math.sqrt(square / (Math.PI * 2))\n        var id = dataItem.code\n        dataProvider.images.push({\n          type: 'circle',\n          width: size,\n          height: size,\n          color: dataItem.color,\n          longitude: this.mapData.latlong[id].longitude,\n          latitude: this.mapData.latlong[id].latitude,\n          title: dataItem.name,\n          value: value,\n        })\n      })\n\n      map.dataProvider = dataProvider\n      map.write(this.$el)\n    },\n  },\n\n  mounted () {\n    this.drawMap()\n  },\n}\n</script>\n\n<style lang='scss'>\n@import '~ammap3/ammap/ammap.css';\n\n.bubble-map {\n  height: 100%;\n}\n</style>\n"],"sourceRoot":"src/components/maps/bubble-maps"}]}