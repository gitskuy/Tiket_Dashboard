{"remainingRequest":"/home/ahmad/tiket/experiments/tiketfinalpush/Tiket_Dashboard/node_modules/babel-loader/lib/index.js!/home/ahmad/tiket/experiments/tiketfinalpush/Tiket_Dashboard/src/vuestic-theme/vuestic-directives/StickyScroll.js","dependencies":[{"path":"/home/ahmad/tiket/experiments/tiketfinalpush/Tiket_Dashboard/src/vuestic-theme/vuestic-directives/StickyScroll.js","mtime":1563286052661},{"path":"/home/ahmad/tiket/experiments/tiketfinalpush/Tiket_Dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1563287225222},{"path":"/home/ahmad/tiket/experiments/tiketfinalpush/Tiket_Dashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["export default {\n  bind: function bind(el, binding) {\n    var duration = binding.value.duration || 500;\n    var isAnimated = binding.value.animate;\n    var observer = new MutationObserver(scrollToBottom);\n    var config = {\n      childList: true\n    };\n    observer.observe(el, config);\n\n    function animateScroll(duration) {\n      var start = el.scrollTop;\n      var end = el.scrollHeight;\n      var change = end - start;\n      var increment = 20;\n\n      function easeInOut(currentTime, start, change, duration) {\n        currentTime /= duration / 2;\n\n        if (currentTime < 1) {\n          return change / 2 * currentTime * currentTime + start;\n        }\n\n        currentTime -= 1;\n        return -change / 2 * (currentTime * (currentTime - 2) - 1) + start;\n      }\n\n      function animate(elapsedTime) {\n        elapsedTime += increment;\n        var position = easeInOut(elapsedTime, start, change, duration);\n        el.scrollTop = position;\n\n        if (elapsedTime < duration) {\n          setTimeout(function () {\n            animate(elapsedTime);\n          }, increment);\n        }\n      }\n\n      animate(0);\n    }\n\n    function scrollToBottom() {\n      if (isAnimated) {\n        animateScroll(duration);\n      } else {\n        el.scrollTop = el.scrollHeight;\n      }\n    }\n  }\n};",{"version":3,"sources":["/home/ahmad/tiket/experiments/tiketfinalpush/Tiket_Dashboard/src/vuestic-theme/vuestic-directives/StickyScroll.js"],"names":["bind","el","binding","duration","value","isAnimated","animate","observer","MutationObserver","scrollToBottom","config","childList","observe","animateScroll","start","scrollTop","end","scrollHeight","change","increment","easeInOut","currentTime","elapsedTime","position","setTimeout"],"mappings":"AAAA,eAAe;AACbA,QAAM,cAACC,EAAD,EAAKC,OAAL,EAAiB;AACrB,QAAIC,WAAWD,QAAQE,KAAR,CAAcD,QAAd,IAA0B,GAAzC;AACA,QAAIE,aAAaH,QAAQE,KAAR,CAAcE,OAA/B;AAEA,QAAIC,WAAW,IAAIC,gBAAJ,CAAqBC,cAArB,CAAf;AACA,QAAIC,SAAS;AAAEC,iBAAW;AAAb,KAAb;AACAJ,aAASK,OAAT,CAAiBX,EAAjB,EAAqBS,MAArB;;AAEA,aAASG,aAAT,CAAwBV,QAAxB,EAAkC;AAChC,UAAIW,QAAQb,GAAGc,SAAf;AACA,UAAIC,MAAMf,GAAGgB,YAAb;AACA,UAAIC,SAASF,MAAMF,KAAnB;AACA,UAAIK,YAAY,EAAhB;;AAEA,eAASC,SAAT,CAAoBC,WAApB,EAAiCP,KAAjC,EAAwCI,MAAxC,EAAgDf,QAAhD,EAA0D;AACxDkB,uBAAelB,WAAW,CAA1B;;AACA,YAAIkB,cAAc,CAAlB,EAAqB;AACnB,iBAAOH,SAAS,CAAT,GAAaG,WAAb,GAA2BA,WAA3B,GAAyCP,KAAhD;AACD;;AACDO,uBAAe,CAAf;AACA,eAAO,CAACH,MAAD,GAAU,CAAV,IAAeG,eAAeA,cAAc,CAA7B,IAAkC,CAAjD,IAAsDP,KAA7D;AACD;;AAED,eAASR,OAAT,CAAkBgB,WAAlB,EAA+B;AAC7BA,uBAAeH,SAAf;AACA,YAAII,WAAWH,UAAUE,WAAV,EAAuBR,KAAvB,EAA8BI,MAA9B,EAAsCf,QAAtC,CAAf;AACAF,WAAGc,SAAH,GAAeQ,QAAf;;AAEA,YAAID,cAAcnB,QAAlB,EAA4B;AAC1BqB,qBAAW,YAAY;AACrBlB,oBAAQgB,WAAR;AACD,WAFD,EAEGH,SAFH;AAGD;AACF;;AAEDb,cAAQ,CAAR;AACD;;AAED,aAASG,cAAT,GAA2B;AACzB,UAAIJ,UAAJ,EAAgB;AACdQ,sBAAcV,QAAd;AACD,OAFD,MAEO;AACLF,WAAGc,SAAH,GAAed,GAAGgB,YAAlB;AACD;AACF;AACF;AA9CY,CAAf","sourcesContent":["export default {\n  bind: (el, binding) => {\n    let duration = binding.value.duration || 500\n    let isAnimated = binding.value.animate\n\n    let observer = new MutationObserver(scrollToBottom)\n    let config = { childList: true }\n    observer.observe(el, config)\n\n    function animateScroll (duration) {\n      let start = el.scrollTop\n      let end = el.scrollHeight\n      let change = end - start\n      let increment = 20\n\n      function easeInOut (currentTime, start, change, duration) {\n        currentTime /= duration / 2\n        if (currentTime < 1) {\n          return change / 2 * currentTime * currentTime + start\n        }\n        currentTime -= 1\n        return -change / 2 * (currentTime * (currentTime - 2) - 1) + start\n      }\n\n      function animate (elapsedTime) {\n        elapsedTime += increment\n        var position = easeInOut(elapsedTime, start, change, duration)\n        el.scrollTop = position\n\n        if (elapsedTime < duration) {\n          setTimeout(function () {\n            animate(elapsedTime)\n          }, increment)\n        }\n      }\n\n      animate(0)\n    }\n\n    function scrollToBottom () {\n      if (isAnimated) {\n        animateScroll(duration)\n      } else {\n        el.scrollTop = el.scrollHeight\n      }\n    }\n  },\n}\n"]}]}